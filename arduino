#include <DallasTemperature.h>
#include <OneWire.h>

//------------------------------------------
//Wifi Access Point
// Load Wi-Fi library
#include <ESP8266WiFi.h>

// Replace with your network credentials
const char* ssid     = "sparge";
const char* password = "beer";


//------------------------------------------
//Web server
// Set web server port number to 80
WiFiServer server(80);

//IPAddress    apIP(42, 42, 42, 42);  // Defining a static IP address: local & gateway
                                      // Default IP in AP mode is 192.168.4.1

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String elementState = "off";

//------------------------------------------
//DS18B20
#define ONE_WIRE_BUS 2
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

int element = 5;
float temp;
int resolution = 12;
float setpoint = 75.00;
float hyst = 1.00;

void setup() {
//------------------------------------------
//I/O setup
 Serial.begin(115200);
  delay(100);

  pinMode(element, OUTPUT);
  digitalWrite(element, LOW);
  
  Serial.println();
  Serial.println();
  Serial.println("Starting up the Dallas Temperature IC Control Library");

  sensors.begin();

  Serial.print("Locating devices...");
  Serial.print("Found ");
  Serial.print(sensors.getDeviceCount(), DEC);
  Serial.println(" devices.");
  Serial.println();

sensors.setResolution(resolution);

Serial.print("Resolution: ");
Serial.println(sensors.getResolution());
Serial.println();

//------------------------------------------
//WiFi AP Setup
 //set-up the custom IP address
  WiFi.mode(WIFI_AP_STA);
 //WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));   // subnet FF FF FF 00  
  
  /* You can remove the password parameter if you want the AP to be open. */
  WiFi.softAP(ssid, password);
  IPAddress myIP = WiFi.softAPIP();
  Serial.println("AP IP address: ");
  Serial.println(myIP);

  // Print local IP address and start web server
Serial.println("");
Serial.println("AP Enabled");
Serial.print("SSID: ");
Serial.println(ssid);
Serial.print("AP IP Address: ");
Serial.print(myIP);
Serial.println(WiFi.localIP());

//------------------------------------------
//Web server Setup
server.begin();

}

void loop() {
//------------------------------------------
//Data loop 
 sensors.requestTemperatures();
  temp = sensors.getTempCByIndex(0);
  Serial.print("Temperature ");
  Serial.print(temp);
  Serial.print(" Setpoint ");
  Serial.print(setpoint);
  Serial.print(" Hyst ");
  Serial.print(hyst);
  Serial.print(" Status ");
  Serial.println(digitalRead(element));
  if (temp <= setpoint) {
    digitalWrite(element, HIGH);
  }
  if (temp > (setpoint - hyst)) {
    digitalWrite(element, LOW);
  };
  delay(500);
  
//------------------------------------------
//Web Server loop
WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
  
// turns the GPIOs on and off
            if (header.indexOf("GET /5/on") >= 0) {
              Serial.println("Element on");
              elementState = "on";
              digitalWrite(element, HIGH);
            } else if (header.indexOf("GET /5/off") >= 0) {
              Serial.println("Element off");
              elementState = "off";
              digitalWrite(element, LOW);
        //    } else if (header.indexOf("GET /4/on") >= 0) {
        //      Serial.println("GPIO 4 on");
        //      output4State = "on";
        //     digitalWrite(output4, HIGH);
        //   } else if (header.indexOf("GET /4/off") >= 0) {
        //      Serial.println("GPIO 4 off");
        //      output4State = "off";
        //      digitalWrite(output4, LOW);
            }  

           // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #77878A;}</style></head>");
            
// Web Page Heading
            client.println("<body><h1>Sparge Water Controller</h1>");
            
// Display Current Temp
            client.println("<h2>Temperature </h2>");
            client.println(temp);

// Display Current Temp
            client.println("<h2>Setpoint </h2>");
            client.println(setpoint);

// Display current state, and ON/OFF buttons for GPIO 5  
            client.println("<p>GPIO 5 - State " + elementState + "</p>");
            // If the elementState is off, it displays the ON button       
            if (elementState=="off") {
              client.println("<p><a href=\"/5/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/5/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
            
            client.println("</body></html>");
             // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
